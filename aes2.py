"""
AES Implementation
128 bit data block
128/192/256 bit key
10/12/14 rounds
Input in hex 
Output in hex
"""

class AES():
    def __init__(self, key):
        self.sbox=[[0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76],
    [0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0],
    [0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15],
    [0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75],
    [0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84],
    [0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF],
    [0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8],
    [0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2],
    [0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73],
    [0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB],
    [0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79],
    [0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08],
    [0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A],
    [0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E],
    [0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF],
    [0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]]
        # self.inverse_sbox=[[0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB],[0x7c, 0xe3, 0x39]]
        self.rcon=[0x01000000, 0x02000000, 0x04000000, 0x08000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000, 0x1B000000, 0x36000000, 0x6c000000, 0xd8000000, 0xab000000, 0x4d000000]
        self.m=0x11b
        self.key=key
        self.keylen=len(self.key)
        if self.keylen==32 or self.keylen==48 and self.keylen==64:
            pass
        else:
            raise Exception("Invalid key length")
        self.rounds=(self.keylen//8)+6
        self.key_expansion()
    
    def encryption(self, plaintext):
        self.state=[]
        #initial state
        for i in range (4):
            self.state.append(plaintext[i*2:i*2+2]+plaintext[i*2+8:i*2+10]+plaintext[i*2+16:i*2+18]+plaintext[i*2+24:i*2+26])
        #round 0: add round key
        self.add_round_key(0)
        #remaining rounds: sub -> shift -> mix -> add round key
        for i in range(1, self.rounds):
            pass
    
    def add_round_key(self, round):
        for i in range(4):
            self.state[i]=self.xor(self.state[i],self.w[round*4+i])

    def shift_rows(self):
        for i in range(4):
            self.state[i]=self.state[i][2*i:]+self.state[i][:2*i]

    def mix_columns(self):
        mult_mx=[[2, 3, 1, 1], [1, 2, 3, 1], [1, 1, 2, 3], [3, 1, 1, 2]]
        for i in range (4):
            res=[]
            for j in range(4):
                a=mult_mx[i][j]
                if a==1:
                    res.append(self.state[j][i])
                elif a==2:
                    x=int(self.state[j][i],16)*2
                    if x>255:
                        x=self.xor(hex(x)[2:],hex(self.m)[2:])
                        x=x[1:]
                    res.append(x)
                elif a==3:
                    x=int(self.state[j][i],16)*2
                    if x>255:
                        x=self.xor(hex(x)[2:],hex(self.m)[2:])
                        x=x[1:]
                    x=self.xor(x, self.state[j][i])
                    res.append(x)
            
    
    def key_expansion(self):
        self.w=[]
        for i in range(len(self.key)//8):
            self.w.append(self.key[i*8:i*8+8])

        for i in range(len(self.key)//8, 4*(self.rounds+1)):
            temp=self.w[i-1]
            if i%4==0:
                temp=self.sub_bytes(self.rot_word(temp))

                temp=self.xor(temp, hex(self.rcon[i//4-1])[2:].zfill(8))
            self.w.append(self.xor(self.w[i-4], temp))

    def xor(self, a, b):
        start=len(a)
        if len(a)!=len(b):
            raise Exception("xor: Length of a and b must be same")
        a,b=int(a,16),int(b,16)
        return hex(a^b)[2:].zfill(start)
    
    def rot_word(self, word):
        return word[2:]+word[:2]
    
    def sub_bytes(self, word):
        for i in range(0,len(word),2):
            x,y=word[i],word[i+1]
            x,y=int(x,16),int(y,16)
            x,y=hex(self.sbox[x][y])[2:].zfill(2)[0],hex(self.sbox[x][y])[2:].zfill(2)[1]
            word=word[:i]+x+y+word[i+2:]
        return word


plain="0189fe7623abdc5445cdba3267ef9810" #input("Enter the 128 bit data block in hex: ")
key="0f470caf15d9b77f71e8ad67c959d698" #input("Enter the 128/192/256 bit key in hex: ") 

# state=int(state,16)
# key=int(key,16)

a=AES(key)
a.encryption(plain)
